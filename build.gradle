import org.apache.tools.ant.filters.ReplaceTokens
import net.minecraftforge.gradle.tasks.GenEclipseRunTask

plugins {
    id 'java'
    id 'eclipse'
    id "net.minecraftforge.gradle.forge" version "2.0.2" apply false
}

// For copying dependencies into the libs and natives folders (if using maven deps)
apply from: 'exportdeps.gradle'

group 'com.tfowl'
version '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

/* Used when creating eclipse launch configurations */
project.ext.mainClassName = 'com.tfowl.project.Start'

repositories {
    mavenCentral()

    flatDir {
        dir libraries_directory
    }
}

dependencies {
    //Using a flatDir repository
    compile name: 'slick'
    compile name: 'lwjgl'
    compile name: 'jinput'
    //compile files("$libraries_directory/slick.jar")
    //compile group: 'org.slick2d', name: 'slick2d-core', version: '1.0.2'

//    testCompile group: 'junit', name: 'junit', version: '4.12'

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////Everything below here is for exporting the project for submission//////////////////////
/////////////////////////////////////////////It is also a mess///////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* Load the student-specific properties from gradle.student.properties */
project.ext.studentProperties = new Properties()
project.ext.studentProperties.load(new FileInputStream("student.properties"))
project.ext.studentid = project.ext.studentProperties.getProperty("studentid", "unknown_student_id")
project.ext.studentusername = project.ext.studentProperties.getProperty("studentusername", "unknown_student_username")

def submissionGroup = 'Project Submission'
def submittedProjectName = "${project.name}-$version-$studentusername-$studentid"
def submittedProjectZip = "${submittedProjectName}.zip"
def launchFileName = "RunProjectFor${studentusername}-${studentid}.launch"

task generateEclipseLaunch(type: GenEclipseRunTask) {
    projectName submittedProjectName
    mainClass mainClassName
    runDir "\${project_loc}"
    outputFile launchFileName

    doLast {
        delete "\${project_loc}"
    }
}

task cleanEclipseLaunch(type: Delete) {
    delete launchFileName
}

task zipWholeProject(type: Zip, dependsOn: [tasks.eclipse, generateEclipseLaunch]) {
    archiveName = submittedProjectZip
    from('src/main/java') {
        into 'src/main/java'
        filter(ReplaceTokens, tokens: [STUDENTID: studentid, STUDENTNAME: studentusername])
    }
    from(project.projectDir) {
        exclude('src/main/java')
        exclude(archiveName)
        exclude('.gradle')
        exclude('.idea')
        exclude('specification.pdf')
        exclude('student.properties')
        exclude('build')
    }
    destinationDir project.projectDir
}

task cleanZippedProject(type: Delete, dependsOn: [cleanEclipse, cleanEclipseLaunch]) {
    delete submittedProjectZip
}

cleanEclipse.doLast {
    delete '.settings'
}

eclipseClasspath {
}

eclipse {
    //pathVariables 'libs': file(libraries_directory)

    classpath {
        downloadSources = false
        downloadJavadoc = false

        file {
            whenMerged { classpath ->
                classpath.entries
                        .findAll { it.kind == 'lib' }
                        .each {
                    it.path = "$libraries_directory/$it.moduleVersion.name"
                    if (it.moduleVersion.name == 'lwjgl') {
                        it.nativeLibraryLocation = "$submittedProjectName/$natives_directory"
                    }
                }
            }
        }
    }
    jdt {}
    project {
        name = submittedProjectName
        comment = "Project $version for SWEN20003 by $studentusername ($studentid)"
    }
}

task exportSubmission(dependsOn: zipWholeProject) {
    description 'Exports this project as a zipped eclipse project for submission'
    group submissionGroup

    doLast {
        copy {
            from submittedProjectZip
            into project.rootDir
            rename(submittedProjectZip, 'submission.zip')
        }
    }

    finalizedBy cleanZippedProject
}

task cleanSubmission(type: Delete, dependsOn: cleanZippedProject) {
    description 'Cleans all files involved in submitting the project'
    group submissionGroup

    delete 'submission.zip'
}
